// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/pbs/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProductId()) < 3 {
		err := CreateOrderRequestValidationError{
			field:  "ProductId",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Side

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for LimitPrice

	// no validation rules for TimeInForce

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OwnerId

	// no validation rules for ProductId

	// no validation rules for Side

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for LimitPrice

	// no validation rules for TimeInForce

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilledQuantity

	// no validation rules for FilledValue

	// no validation rules for AverageFilledPrice

	// no validation rules for Commission

	// no validation rules for ExchangeFee

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on ReadOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrderRequestMultiError, or nil if none found.
func (m *ReadOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 36 {
		err := ReadOrderRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ReadOrderRequestMultiError(errors)
	}

	return nil
}

// ReadOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ReadOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrderRequestMultiError) AllErrors() []error { return m }

// ReadOrderRequestValidationError is the validation error returned by
// ReadOrderRequest.Validate if the designated constraints aren't met.
type ReadOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrderRequestValidationError) ErrorName() string { return "ReadOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrderRequestValidationError{}

// Validate checks the field values on ReadOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrderResponseMultiError, or nil if none found.
func (m *ReadOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OwnerId

	// no validation rules for ProductId

	// no validation rules for Side

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for LimitPrice

	// no validation rules for TimeInForce

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadOrderResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadOrderResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilledQuantity

	// no validation rules for FilledValue

	// no validation rules for AverageFilledPrice

	// no validation rules for Commission

	// no validation rules for ExchangeFee

	// no validation rules for CancelReason

	// no validation rules for FailureReason

	if len(errors) > 0 {
		return ReadOrderResponseMultiError(errors)
	}

	return nil
}

// ReadOrderResponseMultiError is an error wrapping multiple validation errors
// returned by ReadOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrderResponseMultiError) AllErrors() []error { return m }

// ReadOrderResponseValidationError is the validation error returned by
// ReadOrderResponse.Validate if the designated constraints aren't met.
type ReadOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrderResponseValidationError) ErrorName() string {
	return "ReadOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrderResponseValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for Cursor

	// no validation rules for SortDirection

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	// no validation rules for NextCursor

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderRequestMultiError, or nil if none found.
func (m *UpdateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Status

	// no validation rules for FilledQuantity

	// no validation rules for FilledValue

	// no validation rules for AverageFilledPrice

	// no validation rules for Commission

	// no validation rules for ExchangeFee

	// no validation rules for CancelReason

	// no validation rules for FailureReason

	if len(errors) > 0 {
		return UpdateOrderRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderRequestMultiError) AllErrors() []error { return m }

// UpdateOrderRequestValidationError is the validation error returned by
// UpdateOrderRequest.Validate if the designated constraints aren't met.
type UpdateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderRequestValidationError) ErrorName() string {
	return "UpdateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderRequestValidationError{}

// Validate checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderResponseMultiError, or nil if none found.
func (m *UpdateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for OwnerId

	// no validation rules for ProductId

	// no validation rules for Side

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for LimitPrice

	// no validation rules for TimeInForce

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FilledQuantity

	// no validation rules for FilledValue

	// no validation rules for AverageFilledPrice

	// no validation rules for Commission

	// no validation rules for ExchangeFee

	// no validation rules for CancelReason

	// no validation rules for FailureReason

	if len(errors) > 0 {
		return UpdateOrderResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderResponseMultiError) AllErrors() []error { return m }

// UpdateOrderResponseValidationError is the validation error returned by
// UpdateOrderResponse.Validate if the designated constraints aren't met.
type UpdateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderResponseValidationError) ErrorName() string {
	return "UpdateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderResponseValidationError{}

// Validate checks the field values on UpdateOrderFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderFeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderFeedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderFeedRequestMultiError, or nil if none found.
func (m *UpdateOrderFeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderFeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for ClientOrderId

	// no validation rules for CumQty

	// no validation rules for LeavesQty

	// no validation rules for AvgPx

	// no validation rules for Fees

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOrderFeedRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderFeedRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderFeedRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderFeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderFeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderFeedRequestMultiError) AllErrors() []error { return m }

// UpdateOrderFeedRequestValidationError is the validation error returned by
// UpdateOrderFeedRequest.Validate if the designated constraints aren't met.
type UpdateOrderFeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderFeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderFeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderFeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderFeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderFeedRequestValidationError) ErrorName() string {
	return "UpdateOrderFeedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderFeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderFeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderFeedRequestValidationError{}

// Validate checks the field values on UpdateOrderFeedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderFeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderFeedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderFeedResponseMultiError, or nil if none found.
func (m *UpdateOrderFeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderFeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderFeedResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderFeedResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderFeedResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderFeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderFeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderFeedResponseMultiError) AllErrors() []error { return m }

// UpdateOrderFeedResponseValidationError is the validation error returned by
// UpdateOrderFeedResponse.Validate if the designated constraints aren't met.
type UpdateOrderFeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderFeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderFeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderFeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderFeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderFeedResponseValidationError) ErrorName() string {
	return "UpdateOrderFeedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderFeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderFeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderFeedResponseValidationError{}

// Validate checks the field values on SendVenueOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVenueOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVenueOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVenueOrderRequestMultiError, or nil if none found.
func (m *SendVenueOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVenueOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) != 36 {
		err := SendVenueOrderRequestValidationError{
			field:  "OrderId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SendVenueOrderRequestMultiError(errors)
	}

	return nil
}

// SendVenueOrderRequestMultiError is an error wrapping multiple validation
// errors returned by SendVenueOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type SendVenueOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVenueOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVenueOrderRequestMultiError) AllErrors() []error { return m }

// SendVenueOrderRequestValidationError is the validation error returned by
// SendVenueOrderRequest.Validate if the designated constraints aren't met.
type SendVenueOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVenueOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVenueOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVenueOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVenueOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVenueOrderRequestValidationError) ErrorName() string {
	return "SendVenueOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVenueOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVenueOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVenueOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVenueOrderRequestValidationError{}

// Validate checks the field values on SendVenueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVenueOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVenueOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVenueOrderResponseMultiError, or nil if none found.
func (m *SendVenueOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVenueOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendVenueOrderResponseMultiError(errors)
	}

	return nil
}

// SendVenueOrderResponseMultiError is an error wrapping multiple validation
// errors returned by SendVenueOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type SendVenueOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVenueOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVenueOrderResponseMultiError) AllErrors() []error { return m }

// SendVenueOrderResponseValidationError is the validation error returned by
// SendVenueOrderResponse.Validate if the designated constraints aren't met.
type SendVenueOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVenueOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVenueOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVenueOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVenueOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVenueOrderResponseValidationError) ErrorName() string {
	return "SendVenueOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendVenueOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVenueOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVenueOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVenueOrderResponseValidationError{}

// Validate checks the field values on SendVenueOrderCancelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVenueOrderCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVenueOrderCancelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVenueOrderCancelRequestMultiError, or nil if none found.
func (m *SendVenueOrderCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVenueOrderCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderId()) != 36 {
		err := SendVenueOrderCancelRequestValidationError{
			field:  "OrderId",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return SendVenueOrderCancelRequestMultiError(errors)
	}

	return nil
}

// SendVenueOrderCancelRequestMultiError is an error wrapping multiple
// validation errors returned by SendVenueOrderCancelRequest.ValidateAll() if
// the designated constraints aren't met.
type SendVenueOrderCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVenueOrderCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVenueOrderCancelRequestMultiError) AllErrors() []error { return m }

// SendVenueOrderCancelRequestValidationError is the validation error returned
// by SendVenueOrderCancelRequest.Validate if the designated constraints
// aren't met.
type SendVenueOrderCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVenueOrderCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVenueOrderCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVenueOrderCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVenueOrderCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVenueOrderCancelRequestValidationError) ErrorName() string {
	return "SendVenueOrderCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVenueOrderCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVenueOrderCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVenueOrderCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVenueOrderCancelRequestValidationError{}

// Validate checks the field values on SendVenueOrderCancelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVenueOrderCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVenueOrderCancelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVenueOrderCancelResponseMultiError, or nil if none found.
func (m *SendVenueOrderCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVenueOrderCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendVenueOrderCancelResponseMultiError(errors)
	}

	return nil
}

// SendVenueOrderCancelResponseMultiError is an error wrapping multiple
// validation errors returned by SendVenueOrderCancelResponse.ValidateAll() if
// the designated constraints aren't met.
type SendVenueOrderCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVenueOrderCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVenueOrderCancelResponseMultiError) AllErrors() []error { return m }

// SendVenueOrderCancelResponseValidationError is the validation error returned
// by SendVenueOrderCancelResponse.Validate if the designated constraints
// aren't met.
type SendVenueOrderCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVenueOrderCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVenueOrderCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVenueOrderCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVenueOrderCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVenueOrderCancelResponseValidationError) ErrorName() string {
	return "SendVenueOrderCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendVenueOrderCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVenueOrderCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVenueOrderCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVenueOrderCancelResponseValidationError{}
