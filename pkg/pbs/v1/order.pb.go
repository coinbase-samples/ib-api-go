// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: pkg/pbs/v1/order.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderSide int32

const (
	OrderSide_ORDER_SIDE_UNSPECIFIED OrderSide = 0
	OrderSide_ORDER_SIDE_BUY         OrderSide = 1
	OrderSide_ORDER_SIDE_SELL        OrderSide = 2
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "ORDER_SIDE_UNSPECIFIED",
		1: "ORDER_SIDE_BUY",
		2: "ORDER_SIDE_SELL",
	}
	OrderSide_value = map[string]int32{
		"ORDER_SIDE_UNSPECIFIED": 0,
		"ORDER_SIDE_BUY":         1,
		"ORDER_SIDE_SELL":        2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_pbs_v1_order_proto_enumTypes[0].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_pkg_pbs_v1_order_proto_enumTypes[0]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{0}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	OrderType_ORDER_TYPE_MARKET      OrderType = 1
	OrderType_ORDER_TYPE_LIMIT       OrderType = 2
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_MARKET":      1,
		"ORDER_TYPE_LIMIT":       2,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_pbs_v1_order_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_pkg_pbs_v1_order_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{1}
}

type OrderTimeInForce int32

const (
	OrderTimeInForce_ORDER_TIME_IN_FORCE_UNSPECIFIED          OrderTimeInForce = 0
	OrderTimeInForce_ORDER_TIME_IN_FORCE_GOOD_UNTIL_DATETIME  OrderTimeInForce = 1
	OrderTimeInForce_ORDER_TIME_IN_FORCE_GOOD_UNTIL_CANCELLED OrderTimeInForce = 2
	OrderTimeInForce_ORDER_TIME_IN_FORCE_IMMEDIATE_OR_CANCEL  OrderTimeInForce = 3
	OrderTimeInForce_ORDER_TIME_IN_FORCE_FILL_OR_KILL         OrderTimeInForce = 4
)

// Enum value maps for OrderTimeInForce.
var (
	OrderTimeInForce_name = map[int32]string{
		0: "ORDER_TIME_IN_FORCE_UNSPECIFIED",
		1: "ORDER_TIME_IN_FORCE_GOOD_UNTIL_DATETIME",
		2: "ORDER_TIME_IN_FORCE_GOOD_UNTIL_CANCELLED",
		3: "ORDER_TIME_IN_FORCE_IMMEDIATE_OR_CANCEL",
		4: "ORDER_TIME_IN_FORCE_FILL_OR_KILL",
	}
	OrderTimeInForce_value = map[string]int32{
		"ORDER_TIME_IN_FORCE_UNSPECIFIED":          0,
		"ORDER_TIME_IN_FORCE_GOOD_UNTIL_DATETIME":  1,
		"ORDER_TIME_IN_FORCE_GOOD_UNTIL_CANCELLED": 2,
		"ORDER_TIME_IN_FORCE_IMMEDIATE_OR_CANCEL":  3,
		"ORDER_TIME_IN_FORCE_FILL_OR_KILL":         4,
	}
)

func (x OrderTimeInForce) Enum() *OrderTimeInForce {
	p := new(OrderTimeInForce)
	*p = x
	return p
}

func (x OrderTimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_pbs_v1_order_proto_enumTypes[2].Descriptor()
}

func (OrderTimeInForce) Type() protoreflect.EnumType {
	return &file_pkg_pbs_v1_order_proto_enumTypes[2]
}

func (x OrderTimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTimeInForce.Descriptor instead.
func (OrderTimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{2}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0
	OrderStatus_ORDER_STATUS_PENDING     OrderStatus = 1
	OrderStatus_ORDER_STATUS_OPEN        OrderStatus = 2
	OrderStatus_ORDER_STATUS_FILLED      OrderStatus = 3
	OrderStatus_ORDER_STATUS_CANCELLED   OrderStatus = 4
	OrderStatus_ORDER_STATUS_EXPIRED     OrderStatus = 5
	OrderStatus_ORDER_STATUS_FAILED      OrderStatus = 6
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_PENDING",
		2: "ORDER_STATUS_OPEN",
		3: "ORDER_STATUS_FILLED",
		4: "ORDER_STATUS_CANCELLED",
		5: "ORDER_STATUS_EXPIRED",
		6: "ORDER_STATUS_FAILED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED": 0,
		"ORDER_STATUS_PENDING":     1,
		"ORDER_STATUS_OPEN":        2,
		"ORDER_STATUS_FILLED":      3,
		"ORDER_STATUS_CANCELLED":   4,
		"ORDER_STATUS_EXPIRED":     5,
		"ORDER_STATUS_FAILED":      6,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_pbs_v1_order_proto_enumTypes[3].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_pkg_pbs_v1_order_proto_enumTypes[3]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{3}
}

type SortDirection int32

const (
	SortDirection_SORT_DIRECTION_UNSPECIFIED SortDirection = 0
	SortDirection_SORT_DIRECTION_ASC         SortDirection = 1
	SortDirection_SORT_DIRECTION_DESC        SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "SORT_DIRECTION_ASC",
		2: "SORT_DIRECTION_DESC",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED": 0,
		"SORT_DIRECTION_ASC":         1,
		"SORT_DIRECTION_DESC":        2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_pbs_v1_order_proto_enumTypes[4].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_pkg_pbs_v1_order_proto_enumTypes[4]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{4}
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId   string           `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Side        OrderSide        `protobuf:"varint,2,opt,name=side,proto3,enum=pkg.pbs.v1.OrderSide" json:"side,omitempty"`
	Type        OrderType        `protobuf:"varint,3,opt,name=type,proto3,enum=pkg.pbs.v1.OrderType" json:"type,omitempty"`
	Quantity    float32          `protobuf:"fixed32,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LimitPrice  float32          `protobuf:"fixed32,5,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	TimeInForce OrderTimeInForce `protobuf:"varint,6,opt,name=time_in_force,json=timeInForce,proto3,enum=pkg.pbs.v1.OrderTimeInForce" json:"time_in_force,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrderRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateOrderRequest) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *CreateOrderRequest) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *CreateOrderRequest) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateOrderRequest) GetLimitPrice() float32 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CreateOrderRequest) GetTimeInForce() OrderTimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return OrderTimeInForce_ORDER_TIME_IN_FORCE_UNSPECIFIED
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerId            string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ProductId          string                 `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Side               OrderSide              `protobuf:"varint,4,opt,name=side,proto3,enum=pkg.pbs.v1.OrderSide" json:"side,omitempty"`
	Type               OrderType              `protobuf:"varint,5,opt,name=type,proto3,enum=pkg.pbs.v1.OrderType" json:"type,omitempty"`
	Quantity           float32                `protobuf:"fixed32,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LimitPrice         float32                `protobuf:"fixed32,7,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	TimeInForce        OrderTimeInForce       `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=pkg.pbs.v1.OrderTimeInForce" json:"time_in_force,omitempty"`
	Status             OrderStatus            `protobuf:"varint,9,opt,name=status,proto3,enum=pkg.pbs.v1.OrderStatus" json:"status,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FilledQuantity     float32                `protobuf:"fixed32,12,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	FilledValue        float32                `protobuf:"fixed32,13,opt,name=filled_value,json=filledValue,proto3" json:"filled_value,omitempty"`
	AverageFilledPrice float32                `protobuf:"fixed32,14,opt,name=average_filled_price,json=averageFilledPrice,proto3" json:"average_filled_price,omitempty"`
	Commission         float32                `protobuf:"fixed32,15,opt,name=commission,proto3" json:"commission,omitempty"`
	ExchangeFee        float32                `protobuf:"fixed32,16,opt,name=exchange_fee,json=exchangeFee,proto3" json:"exchange_fee,omitempty"`
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateOrderResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateOrderResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateOrderResponse) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *CreateOrderResponse) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *CreateOrderResponse) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateOrderResponse) GetLimitPrice() float32 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CreateOrderResponse) GetTimeInForce() OrderTimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return OrderTimeInForce_ORDER_TIME_IN_FORCE_UNSPECIFIED
}

func (x *CreateOrderResponse) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *CreateOrderResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOrderResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateOrderResponse) GetFilledQuantity() float32 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *CreateOrderResponse) GetFilledValue() float32 {
	if x != nil {
		return x.FilledValue
	}
	return 0
}

func (x *CreateOrderResponse) GetAverageFilledPrice() float32 {
	if x != nil {
		return x.AverageFilledPrice
	}
	return 0
}

func (x *CreateOrderResponse) GetCommission() float32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CreateOrderResponse) GetExchangeFee() float32 {
	if x != nil {
		return x.ExchangeFee
	}
	return 0
}

type ReadOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadOrderRequest) Reset() {
	*x = ReadOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrderRequest) ProtoMessage() {}

func (x *ReadOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrderRequest.ProtoReflect.Descriptor instead.
func (*ReadOrderRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{2}
}

func (x *ReadOrderRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerId            string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ProductId          string                 `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Side               OrderSide              `protobuf:"varint,4,opt,name=side,proto3,enum=pkg.pbs.v1.OrderSide" json:"side,omitempty"`
	Type               OrderType              `protobuf:"varint,5,opt,name=type,proto3,enum=pkg.pbs.v1.OrderType" json:"type,omitempty"`
	Quantity           float32                `protobuf:"fixed32,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LimitPrice         float32                `protobuf:"fixed32,7,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	TimeInForce        OrderTimeInForce       `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=pkg.pbs.v1.OrderTimeInForce" json:"time_in_force,omitempty"`
	Status             OrderStatus            `protobuf:"varint,9,opt,name=status,proto3,enum=pkg.pbs.v1.OrderStatus" json:"status,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FilledQuantity     float32                `protobuf:"fixed32,12,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	FilledValue        float32                `protobuf:"fixed32,13,opt,name=filled_value,json=filledValue,proto3" json:"filled_value,omitempty"`
	AverageFilledPrice float32                `protobuf:"fixed32,14,opt,name=average_filled_price,json=averageFilledPrice,proto3" json:"average_filled_price,omitempty"`
	Commission         float32                `protobuf:"fixed32,15,opt,name=commission,proto3" json:"commission,omitempty"`
	ExchangeFee        float32                `protobuf:"fixed32,16,opt,name=exchange_fee,json=exchangeFee,proto3" json:"exchange_fee,omitempty"`
}

func (x *ReadOrderResponse) Reset() {
	*x = ReadOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOrderResponse) ProtoMessage() {}

func (x *ReadOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOrderResponse.ProtoReflect.Descriptor instead.
func (*ReadOrderResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{3}
}

func (x *ReadOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReadOrderResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ReadOrderResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReadOrderResponse) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *ReadOrderResponse) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *ReadOrderResponse) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ReadOrderResponse) GetLimitPrice() float32 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *ReadOrderResponse) GetTimeInForce() OrderTimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return OrderTimeInForce_ORDER_TIME_IN_FORCE_UNSPECIFIED
}

func (x *ReadOrderResponse) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *ReadOrderResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ReadOrderResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReadOrderResponse) GetFilledQuantity() float32 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *ReadOrderResponse) GetFilledValue() float32 {
	if x != nil {
		return x.FilledValue
	}
	return 0
}

func (x *ReadOrderResponse) GetAverageFilledPrice() float32 {
	if x != nil {
		return x.AverageFilledPrice
	}
	return 0
}

func (x *ReadOrderResponse) GetCommission() float32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *ReadOrderResponse) GetExchangeFee() float32 {
	if x != nil {
		return x.ExchangeFee
	}
	return 0
}

type ListOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         string        `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Cursor        string        `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	SortDirection SortDirection `protobuf:"varint,3,opt,name=sort_direction,json=sortDirection,proto3,enum=pkg.pbs.v1.SortDirection" json:"sort_direction,omitempty"`
}

func (x *ListOrdersRequest) Reset() {
	*x = ListOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersRequest) ProtoMessage() {}

func (x *ListOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersRequest.ProtoReflect.Descriptor instead.
func (*ListOrdersRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{4}
}

func (x *ListOrdersRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListOrdersRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListOrdersRequest) GetSortDirection() SortDirection {
	if x != nil {
		return x.SortDirection
	}
	return SortDirection_SORT_DIRECTION_UNSPECIFIED
}

type ListOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ReadOrderResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Count      int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	NextCursor string               `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
	HasNext    bool                 `protobuf:"varint,4,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
}

func (x *ListOrdersResponse) Reset() {
	*x = ListOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrdersResponse) ProtoMessage() {}

func (x *ListOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrdersResponse.ProtoReflect.Descriptor instead.
func (*ListOrdersResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{5}
}

func (x *ListOrdersResponse) GetData() []*ReadOrderResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListOrdersResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrdersResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *ListOrdersResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            string      `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status             OrderStatus `protobuf:"varint,2,opt,name=status,proto3,enum=pkg.pbs.v1.OrderStatus" json:"status,omitempty"`
	FilledQuantity     float32     `protobuf:"fixed32,3,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	FilledValue        float32     `protobuf:"fixed32,4,opt,name=filled_value,json=filledValue,proto3" json:"filled_value,omitempty"`
	AverageFilledPrice float32     `protobuf:"fixed32,5,opt,name=average_filled_price,json=averageFilledPrice,proto3" json:"average_filled_price,omitempty"`
	Commission         float32     `protobuf:"fixed32,6,opt,name=commission,proto3" json:"commission,omitempty"`
	ExchangeFee        float32     `protobuf:"fixed32,7,opt,name=exchange_fee,json=exchangeFee,proto3" json:"exchange_fee,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UpdateOrderRequest) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *UpdateOrderRequest) GetFilledQuantity() float32 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *UpdateOrderRequest) GetFilledValue() float32 {
	if x != nil {
		return x.FilledValue
	}
	return 0
}

func (x *UpdateOrderRequest) GetAverageFilledPrice() float32 {
	if x != nil {
		return x.AverageFilledPrice
	}
	return 0
}

func (x *UpdateOrderRequest) GetCommission() float32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *UpdateOrderRequest) GetExchangeFee() float32 {
	if x != nil {
		return x.ExchangeFee
	}
	return 0
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerId            string                 `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ProductId          string                 `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Side               OrderSide              `protobuf:"varint,4,opt,name=side,proto3,enum=pkg.pbs.v1.OrderSide" json:"side,omitempty"`
	Type               OrderType              `protobuf:"varint,5,opt,name=type,proto3,enum=pkg.pbs.v1.OrderType" json:"type,omitempty"`
	Quantity           float32                `protobuf:"fixed32,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	LimitPrice         float32                `protobuf:"fixed32,7,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	TimeInForce        OrderTimeInForce       `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=pkg.pbs.v1.OrderTimeInForce" json:"time_in_force,omitempty"`
	Status             OrderStatus            `protobuf:"varint,9,opt,name=status,proto3,enum=pkg.pbs.v1.OrderStatus" json:"status,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FilledQuantity     float32                `protobuf:"fixed32,12,opt,name=filled_quantity,json=filledQuantity,proto3" json:"filled_quantity,omitempty"`
	FilledValue        float32                `protobuf:"fixed32,13,opt,name=filled_value,json=filledValue,proto3" json:"filled_value,omitempty"`
	AverageFilledPrice float32                `protobuf:"fixed32,14,opt,name=average_filled_price,json=averageFilledPrice,proto3" json:"average_filled_price,omitempty"`
	Commission         float32                `protobuf:"fixed32,15,opt,name=commission,proto3" json:"commission,omitempty"`
	ExchangeFee        float32                `protobuf:"fixed32,16,opt,name=exchange_fee,json=exchangeFee,proto3" json:"exchange_fee,omitempty"`
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_pbs_v1_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_pbs_v1_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_pkg_pbs_v1_order_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *UpdateOrderResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateOrderResponse) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UpdateOrderResponse) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_ORDER_SIDE_UNSPECIFIED
}

func (x *UpdateOrderResponse) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *UpdateOrderResponse) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *UpdateOrderResponse) GetLimitPrice() float32 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *UpdateOrderResponse) GetTimeInForce() OrderTimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return OrderTimeInForce_ORDER_TIME_IN_FORCE_UNSPECIFIED
}

func (x *UpdateOrderResponse) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *UpdateOrderResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UpdateOrderResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOrderResponse) GetFilledQuantity() float32 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *UpdateOrderResponse) GetFilledValue() float32 {
	if x != nil {
		return x.FilledValue
	}
	return 0
}

func (x *UpdateOrderResponse) GetAverageFilledPrice() float32 {
	if x != nil {
		return x.AverageFilledPrice
	}
	return 0
}

func (x *UpdateOrderResponse) GetCommission() float32 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *UpdateOrderResponse) GetExchangeFee() float32 {
	if x != nil {
		return x.ExchangeFee
	}
	return 0
}

var File_pkg_pbs_v1_order_proto protoreflect.FileDescriptor

var file_pkg_pbs_v1_order_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x0a, 0x05, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x22, 0xa7, 0x05, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x22, 0x2c, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x98, 0x01, 0x1d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa5, 0x05, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xa1,
	0x02, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x65, 0x65, 0x22, 0xa7, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70,
	0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x2a, 0x50, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x54,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x02, 0x2a, 0xe5, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45,
	0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x04, 0x2a, 0xc4, 0x01, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x2a, 0x60, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x02, 0x32, 0xa8, 0x03, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x09,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5f,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70,
	0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6b,
	0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x6f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x70, 0x62, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f,
	0x69, 0x62, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6d, 0x67, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x62, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pkg_pbs_v1_order_proto_rawDescOnce sync.Once
	file_pkg_pbs_v1_order_proto_rawDescData = file_pkg_pbs_v1_order_proto_rawDesc
)

func file_pkg_pbs_v1_order_proto_rawDescGZIP() []byte {
	file_pkg_pbs_v1_order_proto_rawDescOnce.Do(func() {
		file_pkg_pbs_v1_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_pbs_v1_order_proto_rawDescData)
	})
	return file_pkg_pbs_v1_order_proto_rawDescData
}

var file_pkg_pbs_v1_order_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_pkg_pbs_v1_order_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_pkg_pbs_v1_order_proto_goTypes = []interface{}{
	(OrderSide)(0),                // 0: pkg.pbs.v1.OrderSide
	(OrderType)(0),                // 1: pkg.pbs.v1.OrderType
	(OrderTimeInForce)(0),         // 2: pkg.pbs.v1.OrderTimeInForce
	(OrderStatus)(0),              // 3: pkg.pbs.v1.OrderStatus
	(SortDirection)(0),            // 4: pkg.pbs.v1.SortDirection
	(*CreateOrderRequest)(nil),    // 5: pkg.pbs.v1.CreateOrderRequest
	(*CreateOrderResponse)(nil),   // 6: pkg.pbs.v1.CreateOrderResponse
	(*ReadOrderRequest)(nil),      // 7: pkg.pbs.v1.ReadOrderRequest
	(*ReadOrderResponse)(nil),     // 8: pkg.pbs.v1.ReadOrderResponse
	(*ListOrdersRequest)(nil),     // 9: pkg.pbs.v1.ListOrdersRequest
	(*ListOrdersResponse)(nil),    // 10: pkg.pbs.v1.ListOrdersResponse
	(*UpdateOrderRequest)(nil),    // 11: pkg.pbs.v1.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),   // 12: pkg.pbs.v1.UpdateOrderResponse
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_pkg_pbs_v1_order_proto_depIdxs = []int32{
	0,  // 0: pkg.pbs.v1.CreateOrderRequest.side:type_name -> pkg.pbs.v1.OrderSide
	1,  // 1: pkg.pbs.v1.CreateOrderRequest.type:type_name -> pkg.pbs.v1.OrderType
	2,  // 2: pkg.pbs.v1.CreateOrderRequest.time_in_force:type_name -> pkg.pbs.v1.OrderTimeInForce
	0,  // 3: pkg.pbs.v1.CreateOrderResponse.side:type_name -> pkg.pbs.v1.OrderSide
	1,  // 4: pkg.pbs.v1.CreateOrderResponse.type:type_name -> pkg.pbs.v1.OrderType
	2,  // 5: pkg.pbs.v1.CreateOrderResponse.time_in_force:type_name -> pkg.pbs.v1.OrderTimeInForce
	3,  // 6: pkg.pbs.v1.CreateOrderResponse.status:type_name -> pkg.pbs.v1.OrderStatus
	13, // 7: pkg.pbs.v1.CreateOrderResponse.created_at:type_name -> google.protobuf.Timestamp
	13, // 8: pkg.pbs.v1.CreateOrderResponse.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 9: pkg.pbs.v1.ReadOrderResponse.side:type_name -> pkg.pbs.v1.OrderSide
	1,  // 10: pkg.pbs.v1.ReadOrderResponse.type:type_name -> pkg.pbs.v1.OrderType
	2,  // 11: pkg.pbs.v1.ReadOrderResponse.time_in_force:type_name -> pkg.pbs.v1.OrderTimeInForce
	3,  // 12: pkg.pbs.v1.ReadOrderResponse.status:type_name -> pkg.pbs.v1.OrderStatus
	13, // 13: pkg.pbs.v1.ReadOrderResponse.created_at:type_name -> google.protobuf.Timestamp
	13, // 14: pkg.pbs.v1.ReadOrderResponse.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 15: pkg.pbs.v1.ListOrdersRequest.sort_direction:type_name -> pkg.pbs.v1.SortDirection
	8,  // 16: pkg.pbs.v1.ListOrdersResponse.data:type_name -> pkg.pbs.v1.ReadOrderResponse
	3,  // 17: pkg.pbs.v1.UpdateOrderRequest.status:type_name -> pkg.pbs.v1.OrderStatus
	0,  // 18: pkg.pbs.v1.UpdateOrderResponse.side:type_name -> pkg.pbs.v1.OrderSide
	1,  // 19: pkg.pbs.v1.UpdateOrderResponse.type:type_name -> pkg.pbs.v1.OrderType
	2,  // 20: pkg.pbs.v1.UpdateOrderResponse.time_in_force:type_name -> pkg.pbs.v1.OrderTimeInForce
	3,  // 21: pkg.pbs.v1.UpdateOrderResponse.status:type_name -> pkg.pbs.v1.OrderStatus
	13, // 22: pkg.pbs.v1.UpdateOrderResponse.created_at:type_name -> google.protobuf.Timestamp
	13, // 23: pkg.pbs.v1.UpdateOrderResponse.updated_at:type_name -> google.protobuf.Timestamp
	5,  // 24: pkg.pbs.v1.OrderService.CreateOrder:input_type -> pkg.pbs.v1.CreateOrderRequest
	7,  // 25: pkg.pbs.v1.OrderService.ReadOrder:input_type -> pkg.pbs.v1.ReadOrderRequest
	9,  // 26: pkg.pbs.v1.OrderService.ListOrders:input_type -> pkg.pbs.v1.ListOrdersRequest
	11, // 27: pkg.pbs.v1.OrderService.UpdateOrder:input_type -> pkg.pbs.v1.UpdateOrderRequest
	6,  // 28: pkg.pbs.v1.OrderService.CreateOrder:output_type -> pkg.pbs.v1.CreateOrderResponse
	8,  // 29: pkg.pbs.v1.OrderService.ReadOrder:output_type -> pkg.pbs.v1.ReadOrderResponse
	10, // 30: pkg.pbs.v1.OrderService.ListOrders:output_type -> pkg.pbs.v1.ListOrdersResponse
	12, // 31: pkg.pbs.v1.OrderService.UpdateOrder:output_type -> pkg.pbs.v1.UpdateOrderResponse
	28, // [28:32] is the sub-list for method output_type
	24, // [24:28] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pkg_pbs_v1_order_proto_init() }
func file_pkg_pbs_v1_order_proto_init() {
	if File_pkg_pbs_v1_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_pbs_v1_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_pbs_v1_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_pbs_v1_order_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_pbs_v1_order_proto_goTypes,
		DependencyIndexes: file_pkg_pbs_v1_order_proto_depIdxs,
		EnumInfos:         file_pkg_pbs_v1_order_proto_enumTypes,
		MessageInfos:      file_pkg_pbs_v1_order_proto_msgTypes,
	}.Build()
	File_pkg_pbs_v1_order_proto = out.File
	file_pkg_pbs_v1_order_proto_rawDesc = nil
	file_pkg_pbs_v1_order_proto_goTypes = nil
	file_pkg_pbs_v1_order_proto_depIdxs = nil
}
