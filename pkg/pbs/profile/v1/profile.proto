/**
 * Copyright 2022-present Coinbase Global, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pkg.pbs.profile.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/coinbase-samples/ib-usermgr-go/pkg/pbs/profile/v1";

message ReadProfileRequest {
  string id = 1 [(validate.rules).string.len = 36];
}

message ReadProfileResponse {
  string user_id = 1;
  string email = 2;
  string name = 3;
  string legal_name = 4;
  string user_name = 5;
  repeated string roles = 6;
  string address = 7;
  string date_of_birth = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message UpdateProfileRequest {
  string id = 1 [(validate.rules).string.len = 36];
  string email = 2 [(validate.rules).string.email = true];
  string name = 3 [(validate.rules).string = {
    min_len: 3,
    max_len: 50
  }];
  string legal_name = 4 [(validate.rules).string = {
    min_len: 3,
    max_len: 100
  }];
  string user_name = 5 [(validate.rules).string = {
    min_len: 3,
    max_len: 20
  }];
  string address = 7 [(validate.rules).string = {
    min_len: 3,
    max_len: 250
  }];
  string date_of_birth = 8 [(validate.rules).string = {
    min_len: 9,
    max_len: 150
  }];
}

message UpdateProfileResponse {
  string user_id = 1;
  string email = 2;
  string name = 3;
  string legal_name = 4;
  string user_name = 5;
  repeated string roles = 6;
  string address = 7;
  string date_of_birth = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message CreateProfileRequest {
  string id = 1 [(validate.rules).string.len = 36];
  string email = 2 [(validate.rules).string.email = true];
  string name = 3 [(validate.rules).string = {
    min_len: 3,
    max_len: 50
  }];
  string legal_name = 4 [(validate.rules).string = {
    min_len: 3,
    max_len: 100
  }];
  string user_name = 5 [(validate.rules).string = {
    min_len: 3,
    max_len: 20
  }];
  string address = 7 [(validate.rules).string = {
    min_len: 3,
    max_len: 250
  }];
  string date_of_birth = 8 [(validate.rules).string = {
    min_len: 9,
    max_len: 150
  }];
}

message CreateProfileResponse {
  string user_id = 1;
  string email = 2;
  string name = 3;
  string legal_name = 4;
  string user_name = 5;
  repeated string roles = 6;
  string address = 7;
  string date_of_birth = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

service ProfileService {
  rpc ReadProfile(ReadProfileRequest) returns (ReadProfileResponse) {
    option (google.api.http) = {
      get: "/v1/profile/{id}"
    };
  }
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
    option (google.api.http) = {
      put: "/v1/profile/{id}"
      body: "*"
    };
  }
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {
    option (google.api.http) = {
      post: "/v1/profile/{id}"
      body: "*"
    };
  }
}
