// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/pbs/balance/v1/balance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalancesRequestMultiError, or nil if none found.
func (m *ListBalancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) != 36 {
		err := ListBalancesRequestValidationError{
			field:  "Id",
			reason: "value length must be 36 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ListBalancesRequestMultiError(errors)
	}

	return nil
}

// ListBalancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListBalancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBalancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalancesRequestMultiError) AllErrors() []error { return m }

// ListBalancesRequestValidationError is the validation error returned by
// ListBalancesRequest.Validate if the designated constraints aren't met.
type ListBalancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalancesRequestValidationError) ErrorName() string {
	return "ListBalancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalancesRequestValidationError{}

// Validate checks the field values on ListBalancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBalancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBalancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBalancesResponseMultiError, or nil if none found.
func (m *ListBalancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBalancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBalancesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBalancesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBalancesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBalancesResponseMultiError(errors)
	}

	return nil
}

// ListBalancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListBalancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBalancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBalancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBalancesResponseMultiError) AllErrors() []error { return m }

// ListBalancesResponseValidationError is the validation error returned by
// ListBalancesResponse.Validate if the designated constraints aren't met.
type ListBalancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBalancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBalancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBalancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBalancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBalancesResponseValidationError) ErrorName() string {
	return "ListBalancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBalancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBalancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBalancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBalancesResponseValidationError{}

// Validate checks the field values on AccountAndBalance with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccountAndBalance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountAndBalance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountAndBalanceMultiError, or nil if none found.
func (m *AccountAndBalance) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountAndBalance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Currency

	// no validation rules for Balance

	// no validation rules for Hold

	// no validation rules for Available

	if all {
		switch v := interface{}(m.GetBalanceAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AccountAndBalanceValidationError{
					field:  "BalanceAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AccountAndBalanceValidationError{
					field:  "BalanceAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBalanceAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountAndBalanceValidationError{
				field:  "BalanceAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FiatValue

	if len(errors) > 0 {
		return AccountAndBalanceMultiError(errors)
	}

	return nil
}

// AccountAndBalanceMultiError is an error wrapping multiple validation errors
// returned by AccountAndBalance.ValidateAll() if the designated constraints
// aren't met.
type AccountAndBalanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountAndBalanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountAndBalanceMultiError) AllErrors() []error { return m }

// AccountAndBalanceValidationError is the validation error returned by
// AccountAndBalance.Validate if the designated constraints aren't met.
type AccountAndBalanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountAndBalanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountAndBalanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountAndBalanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountAndBalanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountAndBalanceValidationError) ErrorName() string {
	return "AccountAndBalanceValidationError"
}

// Error satisfies the builtin error interface
func (e AccountAndBalanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountAndBalance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountAndBalanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountAndBalanceValidationError{}
